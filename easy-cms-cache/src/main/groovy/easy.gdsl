// Makes binding variables + static import in EasyBeans.groovy

def easyBeans = context(scope: scriptScope(name: 'EasyBeans.groovy'))

contributor(easyBeans) {

    method name: 'easyCoreBeans', type: 'void', params: [beans: 'groovy.lang.Closure']
    method name: 'easyWebBeans', type: 'void', params: [context: 'java.lang.String', beans: 'groovy.lang.Closure']

    property name: 'spring', type: 'de.hybris.platform.spring.ctx.TenantIgnoreXmlWebApplicationContext'
    property name: 'springWeb', type: 'java.util.Map<String,de.hybris.platform.spring.ctx.TenantIgnoreXmlWebApplicationContext>'
    property name: 'logger', type: 'org.slf4j.Logger'
    property name: 'extension', type: 'com.sap.cx.boosters.easy.core.data.EasyExtension'

}

contributor(easyBeans) {

    property name: 'abstractBusinessService', type: 'de.hybris.platform.servicelayer.internal.service.AbstractBusinessService'
    property name: 'configurationService', type: 'de.hybris.platform.servicelayer.config.ConfigurationService'
    property name: 'flexibleSearchService', type: 'de.hybris.platform.servicelayer.search.FlexibleSearchService'
    property name: 'modelService', type: 'de.hybris.platform.servicelayer.model.ModelService'

    property name: 'typeService', type: 'de.hybris.platform.servicelayer.type.TypeService'
    property name: 'converterRegistry', type: 'de.hybris.platform.servicelayer.internal.converter.ConverterRegistry'

    property name: 'userService', type: 'de.hybris.platform.servicelayer.user.UserService'
    property name: 'authenticationService', type: 'de.hybris.platform.servicelayer.security.auth.AuthenticationService'
    property name: 'logsMetricsReporterService', type: 'de.hybris.platform.metrics.dropwizard.MetricsReporterService'
    property name: 'fakeService', type: 'de.hybris.platform.servicelayer.FakeService'
    property name: 'jdbcTemplate', type: 'org.springframework.jdbc.core.JdbcTemplate'
    property name: 'importService', type: 'de.hybris.platform.servicelayer.impex.ImportService'
    property name: 'exportService', type: 'de.hybris.platform.servicelayer.impex.ExportService'
    property name: 'mediaService', type: 'de.hybris.platform.servicelayer.media.MediaService'
    property name: 'commonI18NService', type: 'de.hybris.platform.servicelayer.i18n.CommonI18NService'
    property name: 'sessionService', type: 'de.hybris.platform.servicelayer.session.SessionService'
    property name: 'searchRestrictionService', type: 'de.hybris.platform.search.restriction.SearchRestrictionService'
    property name: 'cartService', type: 'de.hybris.platform.order.CartService'
    property name: 'facetSearchConfigService', type: 'de.hybris.platform.solrfacetsearch.config.FacetSearchConfigService'
    property name: 'cronJobService', type: 'de.hybris.platform.servicelayer.cronjob.CronJobService'
    property name: 'catalogService', type: 'de.hybris.platform.catalog.CatalogService'
    property name: 'catalogVersionService', type: 'de.hybris.platform.catalog.CatalogVersionService'
    property name: 'cmsSiteService', type: 'de.hybris.platform.cms2.servicelayer.services.CMSSiteService'
    property name: 'springELValueProvider', type: 'de.hybris.platform.solrfacetsearch.provider.impl.SpELValueProvider'
    property name: 'productFacade', type: 'de.hybris.platform.commercefacades.product.ProductFacade'

}

// REVIEWME: add some autocompletion inside easyCoreBeans/easyWebBeans

// get the context for all closures
def ctx = context(scope: closureScope())

contributor(ctx) {
    // method name: 'easyCoreBeans', type: 'void', params: [beans: '@groovy.lang.DelegatesTo(value = org.springframework.beans.factory.support.DefaultListableBeanFactory.class) groovy.lang.Closure']
    def call1 = enclosingCall('easyCoreBeans')
    def call3 = enclosingCall('easyWebBeans')

    if (call1 || call2 || call3) {
        delegatesTo(findClass('org.springframework.beans.factory.support.DefaultListableBeanFactory'))
    }
}
