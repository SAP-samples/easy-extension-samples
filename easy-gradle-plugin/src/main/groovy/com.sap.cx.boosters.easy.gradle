plugins {
    id 'groovy'
}

repositories {
    mavenCentral()
}

sourceSets {
    // main {
    //     java {
    //         srcDirs('src/main')
    //         // exclude '.*/easytype/.*'
    //     }
    // }
    models {
        java {
            srcDirs('src/models')
        }
    }
}

configurations {
    modelsImplementation.extendsFrom(implementation)
    // modelsRuntimeOnly.extendsFrom(runtimeOnly)
}

dependencies {

    implementation 'org.codehaus.groovy:groovy-all:3.0.12'
    // modelsImplementation 'org.codehaus.groovy:groovy-all:3.0.12'

    implementation sourceSets.models.output
    implementation hybrisLibrary()

    // testImplementation sourceSets.models.output
    // testImplementation hybrisLibrary()

}

def localExtensionCP(String hybrisHome) {

    def localextensions = new File(hybrisHome,'config/localextensions.xml')
    if (!localextensions.exists()) return []

    def xmlParser = new groovy.xml.XmlSlurper()
    def hybrisconfig = xmlParser.parse(localextensions)
    def paths = hybrisconfig.extensions[0].path.collect{it.'@dir'.text()}
    def bindMap = [HYBRIS_BIN_DIR:"${hybrisHome}/bin"]
    def templateEngine = new groovy.text.GStringTemplateEngine()
    def extensionInfoMap = [:]

    def corePath = '$HYBRIS_BIN_DIR/platform/ext'
    paths << corePath

    def allExtensionNames = [] as Set

    paths.each{p ->

        println "path: ${p}"

        def extensionPath = new File(templateEngine.createTemplate(p).make(bindMap).toString())
        extensionPath.traverse(type: groovy.io.FileType.FILES, nameFilter: 'extensioninfo.xml', maxDepth: 3) {

            println "file: ${it}"

            def extensioninfo = xmlParser.parse(it)
            def extensionName = extensioninfo.extension[0].'@name'.text()
            def requiresExtension = extensioninfo.extension[0].'requires-extension'.collect{it.'@name'.text()}
            def coremodule = extensioninfo.extension[0].'coremodule'.size() > 0
            def webmodule = extensioninfo.extension[0].'webmodule'.size() > 0
            def info = [
                    name:extensionName,
                    root:it.parentFile,
                    coremodule:coremodule,
                    webmodule:webmodule,
                    requires:requiresExtension
            ]
            println "Adding extension: ${extensionName} to map"
            extensionInfoMap.put(extensionName,info)
            // println "${it} ${info}"
            if (p == corePath) allExtensionNames << extensionName

        }

    }

    def extNames = hybrisconfig.extensions[0].extension.collect{it.'@name'.text()}

    def add
    add = {String extName ->
        println "Adding extension: ${extName}"
        if (!allExtensionNames.add(extName)) {
            if (extensionInfoMap[extName] && extensionInfoMap[extName].requires) {
                extensionInfoMap[extName].requires.each{require ->
                    println "Adding required extension: ${require}"
                    add.trampoline(require)}
            }
        }
    }

    extNames.each{add(it)}

    def jarFilter = {dir,name -> name.endsWith('.jar')} as FilenameFilter
    def cp = [] as Set

    allExtensionNames.each{

        println "extension: ${it}"

        def info = extensionInfoMap[it]

        if (info) {
            println "Configuring extension: ${it}"
            def extBinDir = new File(info.root,'bin')
            if (extBinDir.exists()) cp.addAll(extBinDir.listFiles(jarFilter)*.canonicalPath)

            def extLibDir = new File(info.root,'lib')
            if (extLibDir.exists()) cp.addAll(extLibDir.listFiles(jarFilter)*.canonicalPath)

            def extClassesDir = new File(info.root,'classes')
            if (extClassesDir.exists()) cp.add(extClassesDir.canonicalPath)

            def resourcesDir = new File(info.root,'resources')
            if (resourcesDir.exists()) cp.add(resourcesDir.canonicalPath)

        }
    }

    cp.each{it -> println it}

    cp

}

// https://blog.mrhaki.com/2010/04/groovy-goodness-traversing-directory.html
// base implementation, it doesn't exactly match hybris compile classpath
def hybrisLibrary() {

    def hybrisHome = project.getProperties().get('hybrisLocalHomeDir')

    if (!hybrisHome) return files([])

    hybrisHome = resolveHome(hybrisHome)

    def hybrisPlatformDir = new File(hybrisHome,'bin/platform')
    println "hybrisPlatformDir: ${hybrisPlatformDir}"

    def classpath = []
    if (hybrisPlatformDir.exists()) {
        hybrisPlatformDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.jar$/) {
            classpath << it.absolutePath
        }
        hybrisPlatformDir.traverse(type: groovy.io.FileType.DIRECTORIES, nameFilter: 'classes') {
            if (!it.absolutePath.contains('eclipsebin')) classpath << it.absolutePath
        }
    }

    classpath.addAll(localExtensionCP(hybrisHome))

    return files(classpath)

}

def resolveHome(String path) {
    path.replace('~',System.getProperty('user.home'))
}

tasks.register('testClassPath') {
    group = 'easy'
    doLast {
        println hybrisLibrary()
    }
}