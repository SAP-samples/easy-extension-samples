/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-core', version: '4.1.1'
        classpath group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.9'
        classpath group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'
    }
}

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'org.ajoberstar.grgit' version '4.1.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.9'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // this loads hybris libraries for groovy scripts
    implementation hybrisLibrary()
}

sourceSets {
    models {
        java {
            srcDirs('src/models')
        }
    }
}

configurations {
    modelsImplementation.extendsFrom(implementation)
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register('deploy') {
    doLast {
        println "Deploy..."
        println "easyRepoDir: " + easyRepoDir
        println "easyDeployUrl: " + easyDeployUrl

        def grGit = grgit.open(dir: easyRepoDir)
        grGit.add(patterns: ['.'], update: true)
        grGit.commit(message: 'Auto-commit with Gradle deploy')
        grGit.push(force: true)
      
        URL url = new URL(easyDeployUrl)
        URLConnection urlConnection = url.openConnection()
        def code = urlConnection.getResponseCode();
         println "Deploy status: " + code
    }
}

def localExtensionCP(String hybrisHome) {

    def localextensions = new File(hybrisHome,'config/localextensions.xml')
    if (!localextensions.exists()) return []

    def xmlParser = new groovy.xml.XmlSlurper()
    def hybrisconfig = xmlParser.parse(localextensions)
    def paths = hybrisconfig.extensions[0].path.collect{it.'@dir'.text()}
    def bindMap = [HYBRIS_BIN_DIR:"${hybrisHome}/bin"]
    def templateEngine = new groovy.text.GStringTemplateEngine()
    def extensionInfoMap = [:]

    def corePath = '$HYBRIS_BIN_DIR/platform/ext'
    paths << corePath

    def allExtensionNames = [] as Set

    paths.each{p ->

        println "path: ${p}"

        def extensionPath = new File(templateEngine.createTemplate(p).make(bindMap).toString())
        extensionPath.traverse(type: groovy.io.FileType.FILES, nameFilter: 'extensioninfo.xml', maxDepth: 3) {

            println "file: ${it}"

            def extensioninfo = xmlParser.parse(it)
            def extensionName = extensioninfo.extension[0].'@name'.text()
            def requiresExtension = extensioninfo.extension[0].'requires-extension'.collect{it.'@name'.text()}
            def coremodule = extensioninfo.extension[0].'coremodule'.size() > 0
            def webmodule = extensioninfo.extension[0].'webmodule'.size() > 0
            def info = [
                    name:extensionName,
                    root:it.parentFile,
                    coremodule:coremodule,
                    webmodule:webmodule,
                    requires:requiresExtension
            ]
            println "Adding extension: ${extensionName} to map"
            extensionInfoMap.put(extensionName,info)
            // println "${it} ${info}"
            if (p == corePath) allExtensionNames << extensionName

        }

    }

    def extNames = hybrisconfig.extensions[0].extension.collect{it.'@name'.text()}

    def add
    add = {String extName ->
        println "Adding extension: ${extName}"
        if (!allExtensionNames.add(extName)) {
            if (extensionInfoMap[extName] && extensionInfoMap[extName].requires) {
                extensionInfoMap[extName].requires.each{require ->
                    println "Adding required extension: ${require}"
                    add.trampoline(require)}
            }
        }
    }

    extNames.each{add(it)}

    def jarFilter = {dir,name -> name.endsWith('.jar')} as FilenameFilter
    def cp = [] as Set

    allExtensionNames.each{

        println "extension: ${it}"

        def info = extensionInfoMap[it]

        if (info) {
            println "Configuring extension: ${it}"
            def extBinDir = new File(info.root,'bin')
            if (extBinDir.exists()) cp.addAll(extBinDir.listFiles(jarFilter)*.canonicalPath)

            def extLibDir = new File(info.root,'lib')
            if (extLibDir.exists()) cp.addAll(extLibDir.listFiles(jarFilter)*.canonicalPath)

            def extClassesDir = new File(info.root,'classes')
            if (extClassesDir.exists()) cp.add(extClassesDir.canonicalPath)

            def resourcesDir = new File(info.root,'resources')
            if (resourcesDir.exists()) cp.add(resourcesDir.canonicalPath)

        }
    }

    cp.each{it -> println it}

    cp

}

// https://blog.mrhaki.com/2010/04/groovy-goodness-traversing-directory.html
// base implementation, it doens't exactly match hybris compile classpath
def hybrisLibrary() {

    def hybrisHome = project.getProperties().get('groovyHacHybrisHomeDir')

    if (!hybrisHome) return files([])

    hybrisHome = resolveHome(hybrisHome)

    def hybrisPlatformDir = new File(hybrisHome,'bin/platform')
    println "hybrisPlatformDir: ${hybrisPlatformDir}"

    def classpath = []
    if (hybrisPlatformDir.exists()) {
        hybrisPlatformDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.jar$/) {
            classpath << it.absolutePath
        }
        hybrisPlatformDir.traverse(type: groovy.io.FileType.DIRECTORIES, nameFilter: 'classes') {
            if (!it.absolutePath.contains('eclipsebin')) classpath << it.absolutePath
        }
    }

    classpath.addAll(localExtensionCP(hybrisHome))

    return files(classpath)

}

def resolveHome(String path) {
    path.replace('~',System.getProperty('user.home'))
}